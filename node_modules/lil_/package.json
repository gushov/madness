{
  "author": {
    "name": "August Hovland",
    "email": "gushov@gmail.com"
  },
  "name": "lil_",
  "description": "A li'l utility library",
  "version": "0.0.8",
  "repository": {
    "type": "git",
    "url": "git://github.com/gushov/lil_.git"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "devDependencies": {
    "grunt": ">= 0.4.x",
    "buster": ">= 0.6.x",
    "grunt-buster": ">= 0.1.x",
    "grunt-mdlldr": ">= 0.0.x",
    "grunt-contrib-jshint": ">= 0.1.x",
    "grunt-contrib-concat": ">= 0.1.x",
    "grunt-contrib-uglify": ">= 0.1.x",
    "grunt-contrib-watch": ">= 0.1.x"
  },
  "optionalDependencies": {
    "lilprovider": ">= 0.0.x"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "main": "lib/lil_.js",
  "scripts": {
    "test": "grunt buster"
  },
  "readme": "# lil_\n\nA li'l utility library\n\n## Description\n\nlil_ is where I keep all the utility functions that I use in my other li'l modules.\n\n## Browser usage\n\nload dist/lil_.js or dist/lil_.min.js in you browser and call it like this:\n\n```javascript\n(function () {\n\n  var _ = require('lil_');\n\n  //returns \"null\"\n  _.typeOf(null);\n\n}());\n```\n\n## Node usage\n\nInstall via npm: `npm install lil_`\n\n```javascript\nvar _ = require('lil_');\n\n//returns \"null\"\n_.typeOf(null); \n```\n\n## Documentation\n\n### typeOf(thing)\n\nReturns name of thing corresponding with typeof operator except nulls return \"null\" arrays return \"array\".\n\n### each(thing, iterator, context)\n\nCalls iterator function with each element or property of thing.\n\n### every(thing, iterator, context)\n\nIf iterator returns true for each element or property value of thing function returns true otherwise iteration stops and function returns false.\n\n### some(thing iterator, context)\n\nIf iterator returns false for element or property value of thing function returns false otherwise iteration stops and function returns true.\n\n### map(thing, mapper, context)\n\nReturns new array or object populated with elements or properties returned by mapper for each element or property in thing.\n\n### withOut(array, value)\n\nReturns copy of array with all elements equal to value removed. \n\n### walk(target, src, iterator)\n\nwalks src object graph and call iterator with src value, object value, proptery name and target parent object\n\n### extend(target, src, [src...])\n\ncopy properties of src to target.\n\n### defaults(target, src)\n\nCopy src properties to target if not already present in target.\n\n### match(object, test)\n\nReturns true if test properties are \"===\" to object properties.\n\n### pick(target, keys)\n\nReturns copy of target with only properties present in keys.\n\n## License\nCopyright (c) 2012 August Hovland\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gushov/lil_/issues"
  },
  "dependencies": {
    "lilprovider": ">= 0.0.x"
  },
  "_id": "lil_@0.0.8",
  "_from": "lil_@"
}
